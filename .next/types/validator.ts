// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ..\..\app\(auth)\login\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\(auth)\\login\\page.js")
  handler satisfies AppPageConfig<"/login">
}

// Validate ..\..\app\(auth)\register\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\(auth)\\register\\page.js")
  handler satisfies AppPageConfig<"/register">
}

// Validate ..\..\app\access\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\access\\page.js")
  handler satisfies AppPageConfig<"/access">
}

// Validate ..\..\app\auth\signin\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\auth\\signin\\page.js")
  handler satisfies AppPageConfig<"/auth/signin">
}

// Validate ..\..\app\auth\signup\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\auth\\signup\\page.js")
  handler satisfies AppPageConfig<"/auth/signup">
}

// Validate ..\..\app\dashboard\assignments\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\dashboard\\assignments\\page.js")
  handler satisfies AppPageConfig<"/dashboard/assignments">
}

// Validate ..\..\app\dashboard\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\dashboard\\page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ..\..\app\guest\[code]\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\guest\\[code]\\page.js")
  handler satisfies AppPageConfig<"/guest/[code]">
}

// Validate ..\..\app\guest\assignment\[id]\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\guest\\assignment\\[id]\\page.js")
  handler satisfies AppPageConfig<"/guest/assignment/[id]">
}

// Validate ..\..\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\app\student\dashboard\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\student\\dashboard\\page.js")
  handler satisfies AppPageConfig<"/student/dashboard">
}

// Validate ..\..\app\teacher\dashboard\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\teacher\\dashboard\\page.js")
  handler satisfies AppPageConfig<"/teacher/dashboard">
}

// Validate ..\..\app\api\assignments\[id]\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\assignments\\[id]\\route.js")
  handler satisfies RouteHandlerConfig<"/api/assignments/[id]">
}

// Validate ..\..\app\api\assignments\by-code\[code]\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\assignments\\by-code\\[code]\\route.js")
  handler satisfies RouteHandlerConfig<"/api/assignments/by-code/[code]">
}

// Validate ..\..\app\api\assignments\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\assignments\\route.js")
  handler satisfies RouteHandlerConfig<"/api/assignments">
}

// Validate ..\..\app\api\auth\[...nextauth]\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\auth\\[...nextauth]\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/[...nextauth]">
}

// Validate ..\..\app\api\auth\convert-guest\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\auth\\convert-guest\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/convert-guest">
}

// Validate ..\..\app\api\auth\signup\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\auth\\signup\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/signup">
}

// Validate ..\..\app\api\classes\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\classes\\route.js")
  handler satisfies RouteHandlerConfig<"/api/classes">
}

// Validate ..\..\app\api\students\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\students\\route.js")
  handler satisfies RouteHandlerConfig<"/api/students">
}





// Validate ..\..\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
